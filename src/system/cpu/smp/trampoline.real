org 0x1000
bits 16

cli
cld

xor ax, ax
mov ds, ax

mov byte [0x510], 1

jmp 0x0:fix_cs
fix_cs:
mov es, ax
mov fs, ax
mov gs, ax
mov ss, ax

lgdt [gdt_ptr]

mov edx, dword [0x520]
mov cr3, edx

mov eax, cr4
or eax, 1 << 5
or eax, 1 << 7
mov cr4, eax

mov ecx, 0xc0000080
rdmsr

or eax, 0x00000100
wrmsr

mov eax, cr0
or eax, 0x80000001
and eax, ~(0x60000000)
mov cr0, eax

jmp 0x08:.mode64
.mode64:
bits 64
mov ax, 0x10
mov ds, ax
mov es, ax
mov ss, ax

mov rsp, [0x560]

lgdt [0x530]
lidt [0x540]

mov ax, 0x38
ltr ax

cld

mov rbx, qword [0x550]
call rbx

align 16

gdt_ptr:
    dw .gdt_end - .gdt_start - 1
    dq .gdt_start

align 16
.gdt_start:
.null_descriptor:
    dw 0x0000
    dw 0x0000
    db 0x00
    db 00000000b
    db 00000000b
    db 0x00

.kernel_code_64:
    dw 0x0000
    dw 0x0000
    db 0x00
    db 10011010b
    db 00100000b
    db 0x00

.kernel_data:
    dw 0x0000
    dw 0x0000
    db 0x00
    db 10010010b
    db 00000000b
    db 0x00

.user_data_64:
    dw 0x0000
    dw 0x0000
    db 0x00
    db 11110010b
    db 00000000b
    db 0x00

.gdt_end: